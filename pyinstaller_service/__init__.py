import logging
import zlib

from PyInstaller.cliutils.archive_viewer import get_archive

from crits.raw_data.handlers import handle_raw_data_file
from crits.services.core import Service

logger = logging.getLogger(__name__)


class pyinstallerService(Service):
    """
    Get information about a binary using pyinstaller.

    """

    name = "pyinstaller"
    version = '0.0.1'
    description = "Extract information from a binary generated by pyinstaller."
    supported_types = ['Sample']

    @staticmethod
    def valid_for(obj):
        """
        Check to see if this was built with pyinstaller.
        """

        if not obj.filedata:
            return False

        #hexstring = "cffaedfe07000001030000800200"
        return True

    def get_data(self, nm, arch):
        if type(arch.toc) is type({}):
            (ispkg, pos, lngth) = arch.toc.get(nm, (0, None, 0))
            if pos is None:
                return None
            arch.lib.seek(arch.start + pos)
            return zlib.decompress(arch.lib.read(lngth))
        ndx = arch.toc.find(nm)
        dpos, dlen, ulen, flag, typcd, nm = arch.toc[ndx]
        x, data = arch.extract(ndx)
        return data

    def run_archive_viewer(self, obj):
        """
        Get data using the archive viewer.
        """

        # This doesn't work. Everything is showing as an invalid CArchive file.
        with self._write_to_file() as tmp_file:
            try:
                arch = get_archive(tmp_file)
                if type(arch.toc) == type({}):
                    #print(" Name: (ispkg, pos, len)")
                    toc = arch.toc
                else:
                    #print(" pos, length, uncompressed, iscompressed, type, name")
                    toc = arch.toc.data
                for t in toc:
                    d = {'Position': t[0],
                         'Length': t[1],
                         'Uncompressed': t[2],
                         'IsCompressed': t[3],
                         'Type': t[4],
                         'Name': t[5]
                    }
                    if t[4] == 's' and t[5] not in ['pyi_carchive',
                                                    '_pyi_bootstrap',
                                                    '_pyi_egg_install.py']:
                        block = self.get_data(t[5], arch).decode('utf-8')
                        description = "%s pulled from Sample" % t[5]
                        title = t[5]
                        data_type = "Python"
                        tool_name = "pyinstaller_service"
                        result = handle_raw_data_file(
                            block,
                            obj.source,
                            user=self.current_task.username,
                            description=description,
                            title=title,
                            data_type=data_type,
                            tool_name=tool_name,
                        )
                        if result['success']:
                            self._info("RawData added for %s" % t[5])
                            res = obj.add_relationship(
                                rel_item=result['object'],
                                rel_type="Extracted_From",
                                rel_confidence="high",
                                analyst=self.current_task.username
                            )
                            if res['success']:
                                obj.save(username=self.current_task.username)
                                result['object'].save(username=self.current_task.username)
                                self._info("Relationship added for new Raw Data")
                            else:
                                self._info("Error adding relationship: %s" % res['message'])
                        else:
                            self._info(
                                "RawData addition failed for %s:%s" % (t[5],
                                                                       result['message'])
                            )
                    self._add_result("Info", t[5], d)
            except Exception, e:
                self._info("Error: %s" % str(e))
    def run(self, obj, config):
        """
        Run pyinstaller service
        """

        self.run_archive_viewer(obj)
        self.current_task.finish()
