Snugglefish service for CRITs
=============================

This service makes the snugglefish searching functionality available to CRITs
users.

Usage
=====

In order to use snugglefish indexes must be created. Due to the time and memory
requirements to generate snugglefish indexes this service only provides a way
to manage indexes via a script. The act of indexing the data must be done
out-of-band.

To tell CRITs about an index use the provided "index" script as such:

python manage.py runscript snugglefish_service index -- -a create -n FOO -q "{'source.name': 'FOO'}" -d /snuggles

Indexes must consist of a name, query and directory. The name must be unique
amongst all your snugglefish indexes. The query is used to determine which
files to retrieve for an indexing operation. The directory is the location
on disk where the resulting snugglefish index data will be stored. This
location must be readable by the webserver.

You can check the status of an index using:

python manage.py runscript snugglefish_service index -- -a status -n FOO

The output will look something like this:

Name: FOO
Directory: /snuggles
Created: 2015-01-06 23:17:47.592000
Last update: 2015-01-06 23:17:47.592000
Query: {'source.name': 'FOO'}
Last ID: None
Total objects: 672631
Count indexed: 0
Percent indexed: 0.000000

Just checking the status of an index will update the total objects number.
You can do this regularly via a cron job in order to know how far out of date
your index is as new things are added which match your query.

To get the first 500,000 files for the FOO index:

python manage.py runscript -e snugglefish_service index -- -a getnew -n FOO -c 500000 | xargs -I % -n 1 python manage.py runscript -e crits_scripts get_file -- -m % -o /home/wxs/FOO/%

Please note the use of the -e argument to runscript. This uses environment
variables for CRITs authentication. This ensures you don't have to login each
time you dump a file. Also make sure that the output directory (/home/wxs/FOO)
exists before running this command.

Once the files are retrieved you can then use snugglefish to index them:

find /home/wxs/FOO -type f | snugglefish -i -o /home/wxs/snugglefish-indexes/FOO -m 100000

This will index all the files and store the indexes in
/home/wxs/snugglefish-indexes/ with the index name of FOO. It is important that
this index name match the one defined in the CRITs database. This is a very
time and memory intensive operation for large batches of samples so it is
recommended that the files be indexed on an appropriate machine.

Once the indexes have been created they can be moved over to the location
contained within the CRITs database. In this example it is the /snuggles
directory on the webserver. Please note that there will be multiple files
per index but they will all start with FOO in this example.

Once the indexes have been moved you can now update the CRITs index document.
Just because you asked for 500,000 samples does not mean that 500,000 were
retrieved (there could be samples with no backing binary). This is why the
count argument is dynamically generated.

python manage.py runscript -e snugglefish_service index -- -a update -n FOO -c $(ls /home/wxs/FOO | wc -l)

At this point you can use the snugglefish service in CRITs. The snugglefish
service link from the menu will bring up a dialog box where you can select
the index you would like to search and enter the string you want to search
for.

If you wish to delete an index from the database it is done with:

python manage.py runscript -e snugglefish_service index -- -a delete -n FOO
